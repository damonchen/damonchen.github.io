<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rest on Damon小站</title>
    <link>https://damonchen.github.io/tags/rest/</link>
    <description>Recent content in Rest on Damon小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 17 Jul 2016 19:43:38 +0800</lastBuildDate>
    <atom:link href="https://damonchen.github.io/tags/rest/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>理解REST</title>
      <link>https://damonchen.github.io/blog/2016/07/understand-rest/</link>
      <pubDate>Sun, 17 Jul 2016 19:43:38 +0800</pubDate>
      
      <guid>https://damonchen.github.io/blog/2016/07/understand-rest/</guid>
      <description>

&lt;p&gt;REST(Representational State Transfer：表述性状态传递)，由Roy Fielding在他2000年时的
&lt;a href=&#34;http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm&#34; target=&#34;_blank&#34;&gt;博士论文&lt;/a&gt;中引入和定义的。
REST是为分布式定义的一个架构形式，它不是一个标准，但有一些限制：如状态，client/server关系，统一的接口形式。
REST通常用HTTP实现。&lt;/p&gt;

&lt;h2 id=&#34;rest原则&#34;&gt;REST原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;资源&lt;/strong&gt; 可以通过结构化的URI方便导出&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表述性&lt;/strong&gt; 通过JSON或者XML来表述数据对象和属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息&lt;/strong&gt; 显式使用HTTP方法（GET,POST,PUT,DELETE)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无状态&lt;/strong&gt; client和server之间的交互无上下文，状态依赖和扩展是可以扩展，client不保存session状态。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;http方法&#34;&gt;HTTP方法&lt;/h2&gt;

&lt;p&gt;使用HTTP方法匹配CRUD(create, retrieve, update, delete)操作。&lt;/p&gt;

&lt;h3 id=&#34;get&#34;&gt;GET&lt;/h3&gt;

&lt;p&gt;获取信息，GET请求必须安全并且幂等，即无论同一个参数请求多少次，都返回同样的结果。
可以有副作用，但用户并不关注这个副作用，所以不能运行系统中至关重要的操作。
请求可以是部分或者条件的。&lt;/p&gt;

&lt;p&gt;示例为用ID为1的获取地址:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /addresses/1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;post&#34;&gt;POST&lt;/h3&gt;

&lt;p&gt;通常POST用来创建一个新的实体，但不用来更新一个实体。&lt;/p&gt;

&lt;p&gt;创建新的地址&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /addresses
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;put&#34;&gt;PUT&lt;/h3&gt;

&lt;p&gt;在URI中存储实体，可以用来创建一个新的实体或者更新一个实体。一个PUT请求是幂等的。
幂等是PUT动作和POST请求之间的最大差异&lt;/p&gt;

&lt;p&gt;修改ID为1的地址&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /addresses/1
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：PUT替换原来已经存在的实体，如果仅提供数据元素的子集，REST将更新为空或者null。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;patch&#34;&gt;PATCH&lt;/h3&gt;

&lt;p&gt;更新URI中的指定字段，PATCH是幂等的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATCH /addresses/1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete&#34;&gt;DELETE&lt;/h3&gt;

&lt;p&gt;移除资源，但不需要立即移除资源，可以异步处理或者很长时间的请求。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /addresses/1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;http状态码&#34;&gt;HTTP状态码&lt;/h2&gt;

&lt;p&gt;HTTP请求结果的的状态显示&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1xx&lt;/strong&gt; - 信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2xx&lt;/strong&gt; - 成功&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3xx&lt;/strong&gt; - 跳转&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4xx&lt;/strong&gt; - client错误&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5xx&lt;/strong&gt; - server错误&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;media类型&#34;&gt;Media类型&lt;/h2&gt;

&lt;p&gt;HTTP请求头中的&lt;code&gt;Accept&lt;/code&gt;和&lt;code&gt;Content-Type&lt;/code&gt;可以用来描述HTTP中发送或者请求的内容。当client
设置&lt;code&gt;Accept&lt;/code&gt;为 &lt;code&gt;application/json&lt;/code&gt; 时，希望请求可以返回一个JSON信息。当client设置
&lt;code&gt;Content-Type&lt;/code&gt;为&lt;code&gt;application/xml&lt;/code&gt;时，client将使用XML数据进行请求。&lt;/p&gt;

&lt;p&gt;来自：&lt;a href=&#34;https://spring.io/understanding/REST&#34; target=&#34;_blank&#34;&gt;https://spring.io/understanding/REST&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>